import { DilutionResult } from './types';

interface BasicCalcData {
  investment: number;
  ownership_pct: number;
  pre_money: number;
  post_money: number;
  shares?: {
    total: number;
    founder: number;
    investor: number;
    option_pool: number;
    price_per_share: number;
  };
}

export function generatePDFReport(
  basicCalcData: BasicCalcData,
  dilutionData?: DilutionResult[],
  companyName: string = 'Your Company'
): string {
  // This would integrate with a PDF library like jsPDF or Puppeteer
  // For now, return formatted text that could be converted to PDF
  
  let report = `
EQUITY ANALYSIS REPORT
Generated by Equity Calculator Pro
${new Date().toLocaleDateString()}

Company: ${companyName}
=====================================

VALUATION SUMMARY
-----------------
Investment Amount: $${basicCalcData.investment.toLocaleString()}
Ownership Percentage: ${basicCalcData.ownership_pct.toFixed(1)}%
Pre-Money Valuation: $${basicCalcData.pre_money.toLocaleString()}
Post-Money Valuation: $${basicCalcData.post_money.toLocaleString()}
`;

  if (basicCalcData.shares) {
    report += `
SHARE DISTRIBUTION
------------------
Total Shares: ${basicCalcData.shares.total.toLocaleString()}
Founder Shares: ${basicCalcData.shares.founder.toLocaleString()}
Investor Shares: ${basicCalcData.shares.investor.toLocaleString()}
Option Pool Shares: ${basicCalcData.shares.option_pool.toLocaleString()}
Price per Share: $${basicCalcData.shares.price_per_share.toFixed(4)}
`;
  }

  if (dilutionData && dilutionData.length > 0) {
    report += `
DILUTION SCENARIO ANALYSIS
--------------------------
`;
    dilutionData.forEach((round) => {
      report += `
${round.round}:
  Type: ${round.type}
  Investment: $${round.investment.toLocaleString()}
  Pre-Money: $${round.preMoneyValuation.toLocaleString()}
  Post-Money: $${round.postMoneyValuation.toLocaleString()}
  Founder Ownership: ${round.founderOwnership.toFixed(1)}%
  Investor Ownership: ${round.investorOwnership.toFixed(1)}%
  Option Pool: ${round.optionPool.toFixed(1)}%
`;
    });
  }

  report += `
=====================================
Report generated by Equity Calculator Pro
https://github.com/brovsky/equity-calculator-pro

DISCLAIMER: This analysis is for informational purposes only. 
Consult with qualified legal and financial professionals for 
specific advice regarding your equity structure.
`;

  return report;
}

export function generateCSVData(dilutionData: DilutionResult[]): string {
  if (!dilutionData || dilutionData.length === 0) return '';
  
  const headers = [
    'Round',
    'Type',
    'Investment',
    'Pre-Money Valuation',
    'Post-Money Valuation',
    'Founder Ownership %',
    'Investor Ownership %',
    'Option Pool %'
  ];
  
  const csvRows = [headers.join(',')];
  
  dilutionData.forEach(round => {
    const row = [
      `"${round.round}"`,
      `"${round.type}"`,
      round.investment,
      round.preMoneyValuation,
      round.postMoneyValuation,
      round.founderOwnership.toFixed(2),
      round.investorOwnership.toFixed(2),
      round.optionPool.toFixed(2)
    ];
    csvRows.push(row.join(','));
  });
  
  return csvRows.join('\n');
}

export function generateShareableURL(
  investment: number,
  ownership: number,
  showShares: boolean = false,
  shares?: number,
  optionPool?: number
): string {
  const baseURL = typeof window !== 'undefined' ? window.location.origin : '';
  const params = new URLSearchParams();
  
  params.set('investment', investment.toString());
  params.set('ownership', ownership.toString());
  
  if (showShares && shares) {
    params.set('show_shares', 'true');
    params.set('shares', shares.toString());
    if (optionPool) {
      params.set('pool', optionPool.toString());
    }
  }
  
  return `${baseURL}?${params.toString()}`;
}

export function downloadFile(content: string, filename: string, mimeType: string = 'text/plain'): void {
  const blob = new Blob([content], { type: mimeType });
  const url = URL.createObjectURL(blob);
  
  const link = document.createElement('a');
  link.href = url;
  link.download = filename;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  
  URL.revokeObjectURL(url);
}

export function copyToClipboard(text: string): Promise<boolean> {
  if (navigator.clipboard && window.isSecureContext) {
    return navigator.clipboard.writeText(text).then(() => true).catch(() => false);
  } else {
    // Fallback for older browsers
    const textArea = document.createElement('textarea');
    textArea.value = text;
    textArea.style.position = 'fixed';
    textArea.style.left = '-999999px';
    textArea.style.top = '-999999px';
    document.body.appendChild(textArea);
    textArea.focus();
    textArea.select();
    
    try {
      const successful = document.execCommand('copy');
      document.body.removeChild(textArea);
      return Promise.resolve(successful);
    } catch {
      document.body.removeChild(textArea);
      return Promise.resolve(false);
    }
  }
}

export function generateSummaryEmail(
  basicCalcData: BasicCalcData,
  companyName: string = 'Your Company'
): string {
  const subject = encodeURIComponent(`Equity Analysis for ${companyName}`);
  const body = encodeURIComponent(`
Hi,

I've completed an equity analysis for ${companyName} using Equity Calculator Pro:

ðŸ’° Investment: $${basicCalcData.investment.toLocaleString()}
ðŸ“Š Ownership: ${basicCalcData.ownership_pct.toFixed(1)}%
ðŸ“ˆ Pre-Money: $${basicCalcData.pre_money.toLocaleString()}
ðŸ“ˆ Post-Money: $${basicCalcData.post_money.toLocaleString()}

${basicCalcData.shares ? `
ðŸ“‹ Share Details:
â€¢ Total Shares: ${basicCalcData.shares.total.toLocaleString()}
â€¢ Price per Share: $${basicCalcData.shares.price_per_share.toFixed(4)}
â€¢ Founder Shares: ${basicCalcData.shares.founder.toLocaleString()}
â€¢ Investor Shares: ${basicCalcData.shares.investor.toLocaleString()}
` : ''}

This analysis was generated using Equity Calculator Pro.
Check it out: https://github.com/brovsky/equity-calculator-pro

Best regards
`);
  
  return `mailto:?subject=${subject}&body=${body}`;
}

export const exportFormats = {
  PDF: 'pdf',
  CSV: 'csv',
  TXT: 'txt',
  JSON: 'json'
} as const;

export type ExportFormat = typeof exportFormats[keyof typeof exportFormats];