'use client';

import { useState } from 'react';
import { 
  generatePDFReport, 
  generateCSVData, 
  generateShareableURL, 
  downloadFile, 
  copyToClipboard,
  generateSummaryEmail,
  type ExportFormat 
} from '@/lib/export-utils';
import { DilutionResult } from '@/lib/types';

interface BasicCalcData {
  investment: number;
  ownership_pct: number;
  pre_money: number;
  post_money: number;
  shares?: {
    total: number;
    founder: number;
    investor: number;
    option_pool: number;
    price_per_share: number;
  };
}

interface ExportShareProps {
  basicCalcData: BasicCalcData;
  dilutionData?: DilutionResult[];
  companyName?: string;
}

export function ExportShare({ basicCalcData, dilutionData, companyName = 'Your Company' }: ExportShareProps) {
  const [selectedFormat, setSelectedFormat] = useState<ExportFormat>('txt');
  const [isExporting, setIsExporting] = useState(false);
  const [copySuccess, setCopySuccess] = useState<string>('');
  const [shareUrlCopied, setShareUrlCopied] = useState(false);

  const handleExport = async () => {
    setIsExporting(true);
    
    try {
      let content = '';
      let filename = '';
      let mimeType = 'text/plain';
      
      const timestamp = new Date().toISOString().split('T')[0];
      const sanitizedCompanyName = companyName.replace(/[^a-zA-Z0-9]/g, '_');
      
      switch (selectedFormat) {
        case 'txt':
          content = generatePDFReport(basicCalcData, dilutionData, companyName);
          filename = `${sanitizedCompanyName}_equity_analysis_${timestamp}.txt`;
          mimeType = 'text/plain';
          break;
          
        case 'csv':
          if (dilutionData && dilutionData.length > 0) {
            content = generateCSVData(dilutionData);
            filename = `${sanitizedCompanyName}_dilution_scenario_${timestamp}.csv`;
            mimeType = 'text/csv';
          } else {
            // Create basic CSV for single calculation
            content = `Metric,Value\nInvestment,"$${basicCalcData.investment.toLocaleString()}"\nOwnership,"${basicCalcData.ownership_pct.toFixed(1)}%"\nPre-Money,"$${basicCalcData.pre_money.toLocaleString()}"\nPost-Money,"$${basicCalcData.post_money.toLocaleString()}"`;
            filename = `${sanitizedCompanyName}_valuation_${timestamp}.csv`;
            mimeType = 'text/csv';
          }
          break;
          
        case 'json':
          const jsonData = {
            company: companyName,
            generated: new Date().toISOString(),
            basicCalculation: basicCalcData,
            dilutionScenario: dilutionData || null
          };
          content = JSON.stringify(jsonData, null, 2);
          filename = `${sanitizedCompanyName}_equity_data_${timestamp}.json`;
          mimeType = 'application/json';
          break;
          
        default:
          content = generatePDFReport(basicCalcData, dilutionData, companyName);
          filename = `${sanitizedCompanyName}_equity_analysis_${timestamp}.txt`;
          mimeType = 'text/plain';
      }
      
      downloadFile(content, filename, mimeType);
      setCopySuccess('File downloaded successfully!');
      
    } catch {
      setCopySuccess('Export failed. Please try again.');
    } finally {
      setIsExporting(false);
      setTimeout(() => setCopySuccess(''), 3000);
    }
  };

  const handleCopyShareableURL = async () => {
    const url = generateShareableURL(
      basicCalcData.investment,
      basicCalcData.ownership_pct,
      !!basicCalcData.shares,
      basicCalcData.shares?.total,
      basicCalcData.shares ? (basicCalcData.shares.option_pool / basicCalcData.shares.total) * 100 : undefined
    );
    
    const success = await copyToClipboard(url);
    setShareUrlCopied(success);
    
    if (success) {
      setTimeout(() => setShareUrlCopied(false), 3000);
    }
  };

  const handleEmailSummary = () => {
    const emailUrl = generateSummaryEmail(basicCalcData, companyName);
    window.open(emailUrl, '_blank');
  };

  const handleCopyCalculationData = async () => {
    const summaryText = `
Equity Analysis for ${companyName}
=====================================

💰 Investment: $${basicCalcData.investment.toLocaleString()}
📊 Ownership: ${basicCalcData.ownership_pct.toFixed(1)}%
📈 Pre-Money: $${basicCalcData.pre_money.toLocaleString()}
📈 Post-Money: $${basicCalcData.post_money.toLocaleString()}

${basicCalcData.shares ? `
📋 Share Details:
• Total Shares: ${basicCalcData.shares.total.toLocaleString()}
• Price per Share: $${basicCalcData.shares.price_per_share.toFixed(4)}
• Founder Shares: ${basicCalcData.shares.founder.toLocaleString()}
• Investor Shares: ${basicCalcData.shares.investor.toLocaleString()}
• Option Pool: ${basicCalcData.shares.option_pool.toLocaleString()}
` : ''}

Generated by Equity Calculator Pro
https://github.com/brovsky/equity-calculator-pro
`;

    const success = await copyToClipboard(summaryText.trim());
    setCopySuccess(success ? 'Calculation copied to clipboard!' : 'Copy failed. Please try again.');
    setTimeout(() => setCopySuccess(''), 3000);
  };

  return (
    <section className="mt-16 mb-8">
      <div className="max-w-4xl mx-auto px-4">
        <div className="bg-white rounded-xl shadow-lg p-8">
          <div className="text-center mb-8">
            <h2 className="main-header text-2xl font-bold text-gray-900 mb-2">
              📤 Export & Share
            </h2>
            <p className="text-gray-600">
              Export your calculations and share with others
            </p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
            {/* Export Section */}
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">📄 Export Analysis</h3>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Export Format
                </label>
                <select
                  value={selectedFormat}
                  onChange={(e) => setSelectedFormat(e.target.value as ExportFormat)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                >
                  <option value="txt">📄 Text Report (.txt)</option>
                  <option value="csv">📊 Spreadsheet Data (.csv)</option>
                  <option value="json">⚙️ JSON Data (.json)</option>
                </select>
              </div>

              <div className="space-y-3">
                <button
                  onClick={handleExport}
                  disabled={isExporting}
                  className="w-full bg-blue-600 text-white py-3 px-4 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2"
                >
                  {isExporting ? (
                    <>
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                      Exporting...
                    </>
                  ) : (
                    <>
                      📥 Download Report
                    </>
                  )}
                </button>

                <button
                  onClick={handleCopyCalculationData}
                  className="w-full bg-gray-600 text-white py-3 px-4 rounded-md hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 flex items-center justify-center gap-2"
                >
                  📋 Copy to Clipboard
                </button>

                <button
                  onClick={handleEmailSummary}
                  className="w-full bg-green-600 text-white py-3 px-4 rounded-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 flex items-center justify-center gap-2"
                >
                  📧 Email Summary
                </button>
              </div>

              {copySuccess && (
                <div className={`p-3 rounded-md text-sm ${
                  copySuccess.includes('success') || copySuccess.includes('copied') 
                    ? 'bg-green-50 border border-green-200 text-green-700' 
                    : 'bg-red-50 border border-red-200 text-red-700'
                }`}>
                  {copySuccess}
                </div>
              )}
            </div>

            {/* Share Section */}
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">🔗 Share Analysis</h3>
              
              <div className="space-y-3">
                <button
                  onClick={handleCopyShareableURL}
                  className="w-full bg-purple-600 text-white py-3 px-4 rounded-md hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 flex items-center justify-center gap-2"
                >
                  🔗 Copy Shareable Link
                </button>

                {shareUrlCopied && (
                  <div className="p-3 bg-green-50 border border-green-200 rounded-md">
                    <p className="text-green-700 text-sm">
                      ✅ Shareable URL copied to clipboard!
                    </p>
                  </div>
                )}

                <div className="border-t border-gray-200 pt-4">
                  <h4 className="font-medium text-gray-900 mb-3">Share on Social Media</h4>
                  <div className="grid grid-cols-2 gap-3">
                    <button
                      onClick={() => {
                        const text = encodeURIComponent(`Just analyzed equity dilution for ${companyName} using Equity Calculator Pro! 📊💰`);
                        const url = encodeURIComponent(window.location.href);
                        window.open(`https://twitter.com/intent/tweet?text=${text}&url=${url}`, '_blank');
                      }}
                      className="bg-blue-400 text-white py-2 px-3 rounded-md hover:bg-blue-500 text-sm flex items-center justify-center gap-1"
                    >
                      🐦 Twitter
                    </button>
                    
                    <button
                      onClick={() => {
                        const url = encodeURIComponent(window.location.href);
                        const title = encodeURIComponent(`Equity Analysis for ${companyName}`);
                        window.open(`https://www.linkedin.com/sharing/share-offsite/?url=${url}&title=${title}`, '_blank');
                      }}
                      className="bg-blue-700 text-white py-2 px-3 rounded-md hover:bg-blue-800 text-sm flex items-center justify-center gap-1"
                    >
                      💼 LinkedIn
                    </button>
                  </div>
                </div>
              </div>

              <div className="bg-blue-50 p-4 rounded-lg border border-blue-200">
                <h4 className="font-medium text-blue-900 mb-2">📋 What&apos;s Included</h4>
                <ul className="text-sm text-blue-800 space-y-1">
                  <li>• Complete valuation breakdown</li>
                  <li>• Share distribution details</li>
                  {dilutionData && <li>• Multi-round dilution analysis</li>}
                  <li>• Professional formatting</li>
                  <li>• Timestamp and company info</li>
                </ul>
              </div>
            </div>
          </div>

          <div className="mt-8 p-4 bg-gray-50 rounded-lg border border-gray-200">
            <div className="flex items-start gap-3">
              <div className="text-yellow-600 text-xl">⚠️</div>
              <div>
                <h4 className="font-medium text-gray-900 mb-1">Important Disclaimer</h4>
                <p className="text-sm text-gray-600">
                  This analysis is for informational purposes only. Always consult with qualified 
                  legal and financial professionals for specific advice regarding your equity structure 
                  and investment decisions.
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
}